// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(uuid())
  email             String        @unique
  encryptedPassword String
  nickname          String        @unique
  point             Int
  lastDrawingTime   DateTime?
  cards             Card[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  cardEditions      CardEdition[]
  shops             Shop[]
  Purchase          Purchase[]
}

model Card {
  id             String        @id @default(uuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  name           String
  price          Int
  grade          String
  genre          String
  imgUrl         String?
  description    String
  issuedQuantity Int
  createdAt      DateTime      @default(now())
  cardEditions   CardEdition[]
  shops          Shop[]
}

model CardEdition {
  id         String        @id @default(uuid())
  number     Int
  status     EditionStatus @default(inPossesion)
  userId     String
  user       User          @relation(fields: [userId], references: [id])
  cardId     String
  card       Card          @relation(fields: [cardId], references: [id])
  shopId     String?
  shop       Shop?         @relation(fields: [shopId], references: [id])
  purchaseId String?
  purchase   Purchase?     @relation(fields: [purchaseId], references: [id])
  createdAt  DateTime      @default(now())
}

model Shop {
  id            String        @id @default(uuid())
  cardId        String
  card          Card          @relation(fields: [cardId], references: [id])
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  price         Int
  salesCount    Int           @default(0)
  exchangeGrade String?
  exchangeGenre String?
  exchangeDesc  String?
  createdAt     DateTime      @default(now())
  cardEditions  CardEdition[]
}

model Purchase {
  id            String        @id @default(uuid())
  buyer         User          @relation(fields: [buyerId], references: [id])
  buyerId       String
  sellerId      String
  price         Int
  purchaseCount Int
  cardEditions  CardEdition[]
}

enum EditionStatus {
  inPossesion
  onSales
  waitingExchange
}
