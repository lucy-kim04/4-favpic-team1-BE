// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(uuid())
  email             String        @unique
  encryptedPassword String
  nickname          String        @unique
  point             Int
  lastDrawingTime   DateTime?
  cards             Card[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  cardEditions      CardEdition[]
  shops             Shop[]
}

model Card {
  id             String        @id @default(uuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  name           String
  price          Int
  grade          String
  genre          String
  imgUrl         String?
  description    String
  issuedQuantity Int
  createdAt      DateTime      @default(now())
  cardEditions   CardEdition[]
}

model CardEdition {
  id        String        @id @default(uuid())
  number    Int
  status    EditionStatus @default(inPossesion)
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  cardId    String
  card      Card          @relation(fields: [cardId], references: [id])
  shopId    String?
  shop      Shop?         @relation(fields: [shopId], references: [id])
  createdAt DateTime      @default(now())
}

model Shop {
  id            String        @id @default(uuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  price         Int
  exchangeGrade String
  exchangeGenre String
  exchangeDesc  String
  cardId        String
  createdAt     DateTime      @default(now())
  cardEditions  CardEdition[]
}

enum EditionStatus {
  inPossesion
  onSales
  waitingExchange
}
